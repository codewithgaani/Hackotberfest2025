"""
Execution handler for simulating order execution.
"""

from abc import ABCMeta, abstractmethod
import datetime
from .events import FillEvent


class ExecutionHandler(metaclass=ABCMeta):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a Portfolio and
    the ultimate set of Fill objects that actually occur in the
    market.
    """

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing
        a Fill event that gets placed onto the Events queue.
        
        Parameters:
        -----------
        event : OrderEvent
            Contains an Event object with order information
        """
        raise NotImplementedError("Should implement execute_order()")


class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order
    objects into their equivalent fill objects automatically
    without latency, slippage or fill-ratio issues.
    
    This allows a straightforward "first go" test of any strategy,
    before implementation with a more sophisticated execution
    handler.
    """

    def __init__(self, events):
        """
        Initialize the simulated execution handler.
        
        Parameters:
        -----------
        events : Queue
            The Event Queue
        """
        self.events = events

    def execute_order(self, event):
        """
        Simply converts Order objects into Fill objects naively,
        i.e., without any latency, slippage or fill ratio problems.
        
        Parameters:
        -----------
        event : OrderEvent
            Contains an Event object with order information
        """
        if event.type == 'ORDER':
            fill_event = FillEvent(
                timeindex=datetime.datetime.utcnow(),
                symbol=event.symbol,
                exchange='SIMULATED',
                quantity=event.quantity,
                direction=event.direction,
                fill_cost=None  # Will use last close price
            )
            self.events.put(fill_event)


class RealisticExecutionHandler(ExecutionHandler):
    """
    A more realistic execution handler that simulates slippage,
    commission, and potential partial fills.
    """

    def __init__(self, events, slippage_pct=0.0005):
        """
        Initialize the realistic execution handler.
        
        Parameters:
        -----------
        events : Queue
            The Event Queue
        slippage_pct : float
            The percentage slippage on each trade (default 0.05%)
        """
        self.events = events
        self.slippage_pct = slippage_pct

    def execute_order(self, event):
        """
        Converts Order objects into Fill objects with slippage
        and commission considerations.
        
        Parameters:
        -----------
        event : OrderEvent
            Contains an Event object with order information
        """
        if event.type == 'ORDER':
            # Simulate slippage based on direction
            slippage_multiplier = 1.0
            if event.direction == 'BUY':
                slippage_multiplier = 1.0 + self.slippage_pct
            elif event.direction == 'SELL':
                slippage_multiplier = 1.0 - self.slippage_pct
            
            # Create the fill event with slippage
            fill_event = FillEvent(
                timeindex=datetime.datetime.utcnow(),
                symbol=event.symbol,
                exchange='SIMULATED',
                quantity=event.quantity,
                direction=event.direction,
                fill_cost=None,  # Will be calculated based on current price
                commission=None  # Will be auto-calculated
            )
            self.events.put(fill_event)
